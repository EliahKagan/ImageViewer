#!/usr/bin/env python3

import argparse
import math
import os
import sys

from PySide6.QtCore import Qt
from PySide6.QtGui import QAction, QIcon, QPixmap, QResizeEvent
from PySide6.QtWidgets import (QApplication,
                               QFileDialog,
                               QLabel,
                               QMenu,
                               QMessageBox,
                               QStyle)

import ch
from widgets import ResizedNotifyingWidget

APP_NAME = 'Image Viewer'
MAX_START_RATIO = 0.9

parser = argparse.ArgumentParser(APP_NAME)
parser.add_argument('path',
                    nargs='?',
                    help='The path of the image to be opened.',
                    type=str)
path = parser.parse_args().path

print(f'{sys.argv[0]}: PID {os.getpid()}', file=sys.stderr)

app = QApplication(sys.argv)

if path is None:
    path, _ = QFileDialog.getOpenFileName(None,
                                          'Open Image File',
                                          os.path.expanduser('~'))
    if not path:
        sys.exit(1)  # If the user cancels out of the dialog, just quit.

picture = QPixmap(path)

if picture.isNull():
    dialog = QMessageBox()
    dialog.setWindowTitle(APP_NAME)
    dialog.setText(f'Couldn{ch.RSQUO}t open {ch.LDQUO}{path}{ch.RDQUO}')
    dialog.setIcon(QMessageBox.Critical)
    dialog.setWindowFlag(Qt.WindowStaysOnTopHint)
    dialog.exec_()
    sys.exit(1)

filename = os.path.basename(path)
dimensions = f'{picture.width()}{ch.TIMES}{picture.height()}'

window = ResizedNotifyingWidget()
window.setWindowTitle(f'{filename} ({dimensions})')
window.setWindowIcon(QIcon(picture))

def showAbout():
    dialog = QMessageBox(window)
    dialog.setWindowTitle(f'About {APP_NAME}')
    dialog.setText(f'{APP_NAME} is an image viewer by Eliah Kagan.')
    dialog.setIcon(QMessageBox.Information)
    dialog.exec_()

about = QAction(f'About {APP_NAME}{ch.HELLIP}')
about.setIcon(window.style().standardIcon(QStyle.SP_MessageBoxInformation))
about.triggered.connect(showAbout)

menu = QMenu(window)
menu.addAction(about)
menu.addAction(f'About Qt{ch.HELLIP}', lambda: QMessageBox.aboutQt(window))

def showMenu(pos):
    return menu.exec_(window.mapToGlobal(pos))

label = QLabel(window)
label.setScaledContents(True)
label.setPixmap(picture)
label.setContextMenuPolicy(Qt.CustomContextMenu)
label.customContextMenuRequested.connect(showMenu)

def handleResize(event: QResizeEvent):
    ratio = min(event.size().width() / picture.width(),
                event.size().height() / picture.height())

    width = picture.width() * ratio
    height = picture.height() * ratio
    x = max(0, math.floor((event.size().width() - width) / 2))
    y = max(0, math.floor((event.size().height() - height) / 2))

    label.setGeometry(x, y, math.ceil(width), math.ceil(height))

window.resized.connect(handleResize)

screenBounds = window.screen().geometry()
maxInitialWidth = math.floor(screenBounds.width() * MAX_START_RATIO)
maxInitialHeight = math.floor(screenBounds.height() * MAX_START_RATIO)
initialRatio = min(1.0,
                   maxInitialWidth / picture.width(),
                   maxInitialHeight / picture.height())
initialWidth = math.ceil(picture.width() * initialRatio)
initialHeight = math.ceil(picture.height() * initialRatio)
window.resize(initialWidth, initialHeight)

window.show()
sys.exit(app.exec_())
